rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isEmailVerified() {
      return isUserAuthenticated() && request.auth.token.email_verified == true;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidInviteCode(code) {
      return code is string && code.size() == 5 && code.matches('[0-9]{5}');
    }
    
    function isValidInviteStatus(status) {
      return status in ['in process', 'completed', 'expired'];
    }
    
    // Users collection - comprehensive rules for onboarding and profile data
    match /users/{userId} {
      // Users can read their own data
      allow read: if isOwner(userId);
      
      // Allow create for any authenticated user (Google sign-in) - More permissive
      allow create: if isUserAuthenticated() && 
        isOwner(userId) &&
        request.resource.data.keys().hasAll(['uid', 'email', 'createdAt']);
      
      // Allow create for debugging - Very permissive (REMOVE IN PRODUCTION)
      allow create: if isUserAuthenticated() && 
        isOwner(userId);
      
      // Additional debugging rule - allow create with minimal fields
      allow create: if isUserAuthenticated() && 
        isOwner(userId) &&
        request.resource.data.keys().hasAll(['uid', 'email']);
      
      // TEMPORARY: Very permissive rule for debugging (REMOVE AFTER FIX)
      allow create: if isUserAuthenticated() && 
        isOwner(userId);
      
      // Allow update for onboarding steps and profile management
      allow update: if isOwner(userId) && (
        // Basic profile updates (name, photo)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'updatedAt'])) ||
        
        // Dating start date update
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['datingStartDate', 'updatedAt'])) ||
        
        // Invite code generation
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['inviteCode', 'inviteLink', 'inviteStatus', 'updatedAt']) &&
         isValidInviteCode(request.resource.data.inviteCode) &&
         isValidInviteStatus(request.resource.data.inviteStatus)) ||
        
        // Couple connection (when partner joins)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['coupleId', 'inviteStatus', 'updatedAt']) &&
         isValidInviteStatus(request.resource.data.inviteStatus)) ||
        
        // Email verification status update
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['emailVerified', 'updatedAt']))
      );
      
      // Allow users to find other users by invite code (for partner connection)
      allow read: if isUserAuthenticated() && 
        request.query.where('inviteCode', '==', request.query.limit(1));
      
      // Allow reading user data for invite verification (public invite pages)
      allow read: if request.query.where('inviteCode', '==', request.query.limit(1));
    }
    
    // Couples collection rules - More permissive
    match /couples/{coupleId} {
      // Users can read couple data if they're a member
      allow read: if isUserAuthenticated() && 
        request.auth.uid in resource.data.users;
      
      // Allow create for authenticated users (first user creates couple) - More permissive
      allow create: if isUserAuthenticated() && 
        request.resource.data.users.hasAll([request.auth.uid]);
      
      // Allow update to add partner (when invite code is used) - More permissive
      allow update: if isUserAuthenticated() && 
        request.auth.uid in resource.data.users;
    }

    // Posts collection
    match /posts/{postId} {
      // Users can read posts from their couple
      allow read: if isUserAuthenticated() && 
        exists(/databases/$(database)/documents/couples/$(resource.data.coupleId)) &&
        request.auth.uid in get(/databases/$(database)/documents/couples/$(resource.data.coupleId)).data.users;
      
      // Users can create posts for their couple
      allow create: if isUserAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        exists(/databases/$(database)/documents/couples/$(request.resource.data.coupleId)) &&
        request.auth.uid in get(/databases/$(database)/documents/couples/$(request.resource.data.coupleId)).data.users;
      
      // Only the post creator can update/delete their posts
      allow update, delete: if isUserAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Media collection (for photos and videos)
    match /media/{mediaId} {
      // Users can read media from their couple
      allow read: if isUserAuthenticated() && 
        exists(/databases/$(database)/documents/couples/$(resource.data.coupleId)) &&
        request.auth.uid in get(/databases/$(database)/documents/couples/$(resource.data.coupleId)).data.members;
      
      // Users can create media for their couple
      allow create: if isUserAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        exists(/databases/$(database)/documents/couples/$(request.resource.data.coupleId)) &&
        request.auth.uid in get(/databases/$(database)/documents/couples/$(request.resource.data.coupleId)).data.members;
      
      // Users can update media (for favorites) if they're in the same couple
      allow update: if isUserAuthenticated() && 
        exists(/databases/$(database)/documents/couples/$(resource.data.coupleId)) &&
        request.auth.uid in get(/databases/$(database)/documents/couples/$(resource.data.coupleId)).data.members &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isFavorite', 'updatedAt']);
      
      // Only the media creator can delete their media
      allow delete: if isUserAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }

    // Waitlist collection: allow anyone to add and read
    match /waitlist/{waitlistId} {
      allow read, create, update: if true;
    }
    
    // Calendar events collection (for Google Calendar integration)
    match /calendar-events/{eventId} {
      // Users can read/create/update their own calendar events
      allow read, create, update, delete: if isUserAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
  }
}